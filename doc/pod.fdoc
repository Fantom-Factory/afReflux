Overview [#overview]
********************
A framework for creating a simple FWT desktop applications. 

Fantom's core 'flux' framework has the notion of being a URI browser. Reflux takes this idea and adds into the mix:
 
 - **An IoC container** - Relflux applications are IoC applications.
 - **Events** - An application wide eventing mechanism. 
 - **Customisation** - All aspects of a Reflux application may be customised.
 - **Context sensitive commands** - Global commands may be enabled / disabled. 
 - **Browser session** - A consistent means to store session data.
 - **New FWT widgits** - Fancy tabs and a working web browser.
 
The goal of Reflux is to be a customisable application framework; this differs to 'flux' which is more of a static application with custom plugins. 

> Reflux = Flux -> Reloaded.



Install [#install]
******************
Install '@{project.name}' with the Fantom Repository Manager ( [fanr]`docFanr::Tool.install` ):

  C:\> fanr install -r http://repo.status302.com/fanr/ @{pod.name}

To use in a [Fantom]`http://fantom.org/` project, add a dependency to 'build.fan':

  depends = ["sys 1.0", ..., "@{pod.name} @{pod.version}"]



Documentation [#documentation]
******************************
Full API & fandocs are available on the [Status302 repository]`http://repo.status302.com/doc/@{pod.name}/`.


![afReflux.ctabs.png]`afReflux.ctabs.png`


Quick Start [#quickStart]
*************************


Usage [#usage]
**************


Panels [#Panels]
================
[Panels]`Panel` are widget panes that decorate the edges of the main window. Only one instance of each panel type may exist. They are typically created at application startup and live until the application shutsdown.

To create a custom panel, first create a class that extends `Panel`. Our example panel does nothing but set a yellow label as its content:

pre>
class MyPanel : Panel {
    new make(|This| in) : super(in) { 
        content = Label() {
            it.text = "Hello Mum!"
            it.bg   = Color.yellow
        }
    }
}
<pre

Then contribute it to the 'Panels' service in your 'AppModule':

pre>
class AppModule {
    @Contribute { serviceType=Panels# }
    static Void contributePanels(Configuration config) {
        config.add(config.autobuild(MyPanel#))
    }
}
<pre

Panels are not displayed by default but they are automatically added to the 'Panels' menu. Select it in the 'View -> Panels' menu to show:   

![Screenshot of Panel Example]`afReflux.panelExample.png`

Note you can also show the panel progamatically on startup:

pre>
Reflux.start("Example", [AppModule#]) |Reflux reflux, Window window| {
    reflux.showPanel(MyPanel#)
} 
<pre

